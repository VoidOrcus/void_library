-- =================================================================================================
-- || INÍCIO DA BIBLIOTECA 'ModernUI' (VERSÃO 8.0 - REESTRUTURADA) ||
-- =================================================================================================
--[[ 
 	ModernUI Library 
 	Autor: VoidOrcus (com assistência da IA Gemini) 
 	Descrição: Uma biblioteca de UI moderna para Roblox, inspirada em sistemas operacionais. 
 	Versão: 8.0 - Melhorias significativas na barra de título, botões de janela,
 	              layout da sidebar e scroll automático para as abas.
]]
local ModernUI = {}
do
	ModernUI.__index = ModernUI

	local Tab = {}
	Tab.__index = Tab

	--================================================================
	-- SERVIÇOS E CONSTANTES
	--================================================================
	local TweenService = game:GetService("TweenService")
	local UserInputService = game:GetService("UserInputService")
	local RunService = game:GetService("RunService")
	local CoreGui = game:GetService("CoreGui")

	--================================================================
	-- CONFIGURAÇÃO DE TEMA ("Solarized Dark")
	--================================================================
	local Theme = {
		BackgroundColor = Color3.fromRGB(0, 43, 54),
		AccentColor1 = Color3.fromRGB(25, 25, 25), 
		TextColor = Color3.fromRGB(131, 148, 150),
		TextEmphasizedColor = Color3.fromRGB(200, 210, 215),
		PrimaryColor = Color3.fromRGB(38, 139, 210),
		CloseColor = Color3.fromRGB(220, 50, 47),
		FontTitle = Enum.Font.Code,
		FontBody = Enum.Font.Code,
		CornerRadius = 4,
		AnimationSpeed = 0.15,
	}
	ModernUI.Theme = Theme 

	--================================================================
	-- FUNÇÕES AUXILIARES
	--================================================================
	local function Create(instanceType, properties)
		local inst = Instance.new(instanceType)
		for prop, value in pairs(properties or {}) do
			inst[prop] = value
		end
		return inst
	end

	local function Animate(instance, goal, speed)
		speed = speed or Theme.AnimationSpeed
		local tweenInfo = TweenInfo.new(speed, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
		local tween = TweenService:Create(instance, tweenInfo, goal)
		tween:Play()
		return tween
	end

	--================================================================
	-- [[ REESCRITO ]] CRIAÇÃO DA JANELA PRINCIPAL E SIDEBAR
	--================================================================
	function ModernUI.CreateWindow(options)
		local self = setmetatable({}, ModernUI)
		options = options or {}
		local title = options.Title or "ModernUI"
		local size = options.Size or UDim2.fromOffset(600, 450)
		local position = options.Position or UDim2.fromScale(0.5, 0.5)

		self.Tabs = {}
		self.ActiveTabIndex = 1
		self.SidebarSections = {}
		self.TrackedElements = {} 
		self.IsMinimized = false
		self.IsMaximized = false
		self.OriginalProperties = {}

		self.ScreenGui = Create("ScreenGui", { Name = "ModernUI_ScreenGui_"..math.random(1,10000), Parent = CoreGui, ZIndexBehavior = Enum.ZIndexBehavior.Global, ResetOnSpawn = false })
		if syn and syn.protect_gui then pcall(syn.protect_gui, self.ScreenGui) end

		self.WindowFrame = Create("Frame", { Name = "WindowFrame", Size = size, Position = position, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Theme.BackgroundColor, BackgroundTransparency = 0.1, BorderSizePixel = 0, Parent = self.ScreenGui, ClipsDescendants = true })
		self.OriginalProperties = { Size = self.WindowFrame.Size, Position = self.WindowFrame.Position }

		Create("UICorner", { CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = self.WindowFrame })
		Create("UIStroke", { Thickness = 1, Color = Theme.AccentColor1, Transparency = 0.5, Parent = self.WindowFrame })
		
		-- [[ MELHORADO ]] BARRA DE TÍTULO
		local TitleBar = Create("Frame", { Name = "TitleBar", Size = UDim2.new(1, 0, 0, 32), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, Parent = self.WindowFrame, ZIndex = 4 })
		Create("TextLabel", { Name = "TitleLabel", Size = UDim2.new(1, -95, 1, 0), Position = UDim2.fromOffset(10, 0), BackgroundTransparency = 1, Font = Theme.FontTitle, TextColor3 = Theme.TextEmphasizedColor, Text = "  > " .. title, TextXAlignment = Enum.TextXAlignment.Left, TextSize = 15, Parent = TitleBar, ZIndex = 5 })
		
		-- [[ MELHORADO ]] BOTÕES DA JANELA (FECHAR, MINIMIZAR, MAXIMIZAR)
		local WindowButtonsFrame = Create("Frame", { Name = "WindowButtons", Size = UDim2.fromOffset(80, 32), Position = UDim2.new(1, -85, 0, 0), BackgroundTransparency = 1, Parent = TitleBar, ZIndex = 10 })
		Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = WindowButtonsFrame })

		local function CreateIconButton(name, order, iconFunc, hoverColor)
			local btn = Create("TextButton", {Name = name, LayoutOrder = order, Size = UDim2.fromOffset(20, 20), BackgroundColor3 = Theme.AccentColor1, Text = "", Parent = WindowButtonsFrame, AutoButtonColor = false, ZIndex = 11})
			Create("UICorner", {CornerRadius = UDim.new(0, 4), Parent = btn})
			if iconFunc then iconFunc(btn) end
			btn.MouseEnter:Connect(function() Animate(btn, {BackgroundColor3 = hoverColor}) end)
			btn.MouseLeave:Connect(function() Animate(btn, {BackgroundColor3 = Theme.AccentColor1}) end)
			return btn
		end

		local MinimizeButton = CreateIconButton("Minimize", 1, function(p)
			Create("Frame", {Size=UDim2.new(0.6,0,0,2), Position=UDim2.fromScale(0.5,0.5), AnchorPoint=Vector2.new(0.5,0.5), BackgroundColor3=Theme.TextColor, BorderSizePixel=0, Parent=p})
		end, Theme.PrimaryColor)
		
		local MaximizeButton = CreateIconButton("Maximize", 2, function(p)
			Create("Frame", {Size=UDim2.new(0.5,0,0.5,0), Position=UDim2.fromScale(0.5,0.5), AnchorPoint=Vector2.new(0.5,0.5), BackgroundColor3=Theme.TextColor, BorderSizePixel=0, BackgroundTransparency=1, BorderColor3=Theme.TextColor, BorderSizePixel=2, Parent=p})
		end, Theme.PrimaryColor)

		local CloseButton = CreateIconButton("Close", 3, function(p)
			local l1 = Create("Frame", {Size=UDim2.new(0.7,0,0,2), Position=UDim2.fromScale(0.5,0.5), AnchorPoint=Vector2.new(0.5,0.5), BackgroundColor3=Theme.TextColor, BorderSizePixel=0, Rotation=45, Parent=p})
			local l2 = l1:Clone(); l2.Rotation = -45; l2.Parent = p
		end, Theme.CloseColor)

		CloseButton.MouseButton1Click:Connect(function() self.ScreenGui:Destroy() end)
		MinimizeButton.MouseButton1Click:Connect(function()
			self.IsMinimized = not self.IsMinimized
			Animate(self.WindowFrame, {Size = self.IsMinimized and UDim2.new(self.OriginalProperties.Size.X.Scale, self.OriginalProperties.Size.X.Offset, 0, 32) or self.OriginalProperties.Size})
		end)
		MaximizeButton.MouseButton1Click:Connect(function()
			self.IsMaximized = not self.IsMaximized
			Animate(self.WindowFrame, {
				Size = self.IsMaximized and UDim2.new(1, -20, 1, -20) or self.OriginalProperties.Size,
				Position = self.IsMaximized and UDim2.fromScale(0.5, 0.5) or self.OriginalProperties.Position
			})
		end)

		-- [[ MELHORADO ]] SIDEBAR E SEÇÕES
		local Sidebar = Create("Frame", { Name = "Sidebar", Size = UDim2.new(0, 150, 1, -32), Position = UDim2.fromOffset(0, 32), BackgroundColor3 = Theme.BackgroundColor, BackgroundTransparency = 0.3, BorderSizePixel = 0, Parent = self.WindowFrame })
		local SidebarContent = Create("Frame", { Name = "SidebarContent", Size = UDim2.new(1, -10, 1, -10), Position = UDim2.fromScale(0.5, 0.5), AnchorPoint = Vector2.new(0.5,0.5), BackgroundTransparency = 1, Parent = Sidebar })
		Create("UIListLayout", { FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder, HorizontalAlignment = Enum.HorizontalAlignment.Center, Padding = UDim.new(0, 10), Parent = SidebarContent })

		self.SidebarSections.Top = Create("Frame", { Name = "TopSection", Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, LayoutOrder = 1, BackgroundTransparency = 1, Parent = SidebarContent })
		Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = self.SidebarSections.Top })

		Create("Frame", { Name = "Separator1", Size = UDim2.new(1, 0, 0, 1), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, LayoutOrder = 2, Parent = SidebarContent })
		
		-- [[ MELHORADO ]] SCROLL VIEW PARA ABAS
		self.SidebarSections.Middle = Create("ScrollingFrame", { Name = "MiddleSectionTabs", Size = UDim2.new(1, 0, 1, 0), LayoutOrder = 3, BackgroundTransparency = 1, BorderSizePixel = 0, ScrollingDirection = Enum.ScrollingDirection.Y, ScrollBarImageColor3 = Theme.PrimaryColor, ScrollBarThickness = 4, AutomaticCanvasSize = Enum.AutomaticSize.Y, Parent = SidebarContent })
		Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = self.SidebarSections.Middle })

		Create("Frame", { Name = "Separator2", Size = UDim2.new(1, 0, 0, 1), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, LayoutOrder = 4, Parent = SidebarContent })

		self.SidebarSections.Bottom = Create("Frame", { Name = "BottomSection", Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, LayoutOrder = 5, BackgroundTransparency = 1, Parent = SidebarContent })
		Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = self.SidebarSections.Bottom })

		-- Separador Principal
		Create("Frame", { Name = "MainSeparator", Size = UDim2.new(0, 1, 1, 0), Position = UDim2.fromOffset(150, 0), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, Parent = self.WindowFrame, ZIndex = 3 })
		self.PageContainer = Create("Frame", { Name = "PageContainer", Size = UDim2.new(1, -151, 1, -32), Position = UDim2.fromOffset(151, 32), BackgroundTransparency = 1, ClipsDescendants = true, Parent = self.WindowFrame })
		
		return self
	end

	-- [[ MELHORADO ]] SISTEMA DE ABAS (PÁGINAS)
	function ModernUI:AddTab(options)
		options = options or {}
		local name = options.Name or "Nova Aba"
		local section = options.Section or "Middle"
		
		local tab = setmetatable({}, Tab); tab.Window = self 
		
		tab.PageContents = Create("ScrollingFrame", { Name = name .. "_Page", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, BorderSizePixel = 0, ScrollingDirection = Enum.ScrollingDirection.Y, ScrollBarImageColor3 = Theme.PrimaryColor, ScrollBarThickness = 4, AutomaticCanvasSize = Enum.AutomaticSize.Y, Visible = #self.Tabs == 0, Parent = self.PageContainer, ClipsDescendants = false })
		Create("UIListLayout", { Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder, Parent = tab.PageContents })
		Create("UIPadding", { PaddingLeft = UDim.new(0, 15), PaddingRight = UDim.new(0, 15), PaddingTop = UDim.new(0, 15), PaddingBottom = UDim.new(0, 15), Parent = tab.PageContents })

		local parentSection = self.SidebarSections[section] or self.SidebarSections.Middle
		
		local tabButton = Create("TextButton", { Name = name .. "_TabButton", Size = UDim2.new(1, 0, 0, 30), Text = "  " .. name, Font = Theme.FontBody, TextSize = 15, TextColor3 = Theme.TextColor, TextXAlignment = Enum.TextXAlignment.Left, BackgroundColor3 = Theme.BackgroundColor, AutoButtonColor = false, Parent = parentSection })
		Create("UICorner", { CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = tabButton })
		
		local tabData = { Button = tabButton, Page = tab.PageContents }; table.insert(self.Tabs, tabData)
		local currentIndex = #self.Tabs
		
		local function SetActiveState(isActive)
			tab.Page.Visible = isActive
			Animate(tabButton, { BackgroundColor3 = isActive and Theme.AccentColor1 or Theme.BackgroundColor })
			Animate(tabButton, { TextColor3 = isActive and Theme.TextEmphasizedColor or Theme.TextColor })
		end

		tabButton.MouseButton1Click:Connect(function()
			for i, t in ipairs(self.Tabs) do t.Button.ZIndex = 1 end
			tabButton.ZIndex = 2
			for i, t in ipairs(self.Tabs) do Animate(t.Button:FindFirstChild("Indicator"), {Size=UDim2.new(0,0,0.6,0)}) end
			self.ActiveTabIndex = currentIndex
			for i, t in ipairs(self.Tabs) do
				local active = (i == self.ActiveTabIndex)
				t.Page.Visible = active
				Animate(t.Button, { BackgroundColor3 = active and Theme.AccentColor1 or Theme.BackgroundColor })
				Animate(t.Button, { TextColor3 = active and Theme.TextEmphasizedColor or Theme.TextColor })
			end
		end)
		tabButton.MouseEnter:Connect(function() if self.ActiveTabIndex ~= currentIndex then Animate(tabButton, { BackgroundColor3 = Color3.fromRGB(35, 60, 70) }) end end)
		tabButton.MouseLeave:Connect(function() if self.ActiveTabIndex ~= currentIndex then Animate(tabButton, { BackgroundColor3 = Theme.BackgroundColor }) end end)

		if #self.Tabs == 1 then tabButton.MouseButton1Click:Wait() end
		return tab
	end
	
	-- O restante das funções de componentes (AddSlider, AddToggle, etc.) permanecem iguais e não precisam de alteração
	-- ... (As funções que adicionamos anteriormente continuam aqui) ...
	function Tab:AddLabel(options) options = options or {}; local h = Create("Frame", { Name = "LabelHolder", Size = UDim2.new(1, 0, 0, 20), BackgroundTransparency = 1, Parent = self.PageContents, LayoutOrder = options.Order or 0 }); Create("TextLabel", { Name = "Label", Size = UDim2.new(1,0,1,0), Text = options.Title or "Label", Font = Theme.FontBody, TextSize = 16, TextColor3 = options.Color or Theme.TextColor, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = h }); return h end
	function Tab:AddButton(options) options = options or {}; local h = Create("Frame", { Name = "ButtonHolder", Size = UDim2.new(1, 0, 0, 35), BackgroundTransparency = 1, Parent = self.PageContents, LayoutOrder = options.Order or 0 }); local b = Create("TextButton", { Name = "Button", Size = UDim2.new(1, 0, 1, 0), Text = options.Title or "Button", Font = Theme.FontBody, TextSize = 16, TextColor3 = Theme.TextEmphasizedColor, BackgroundColor3 = Theme.AccentColor1, Parent = h, AutoButtonColor = false }); Create("UICorner", { CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = b }); b.MouseButton1Click:Connect(function() if options.Callback then task.spawn(options.Callback) end end); b.MouseEnter:Connect(function() Animate(b, {BackgroundColor3 = Theme.PrimaryColor}) end); b.MouseLeave:Connect(function() Animate(b, {BackgroundColor3 = Theme.AccentColor1}) end); return h end
	function Tab:AddDropdown(options) options = options or {}; local key = options.Key; if not key then warn("ModernUI: AddDropdown requer uma 'Key'") end; local h = Create("Frame", { Name = "DropdownHolder", Size = UDim2.new(1, 0, 0, 35), BackgroundTransparency = 1, Parent = self.PageContents, ZIndex = 5, LayoutOrder = options.Order or 0 }); Create("TextLabel", { Name = "Title", Size = UDim2.new(1,0,0,20), Position = UDim2.new(0,0,-1,0), Text = options.Title or "Dropdown", Font = Theme.FontBody, TextSize = 12, TextColor3 = Theme.TextColor, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = h, ZIndex = 6 }); local b = Create("TextButton", { Name = "MainButton", Size = UDim2.new(1, 0, 1, 0), Text = "  " .. (options.Default or options.Values[1] or ""), Font = Theme.FontBody, TextSize = 15, TextColor3 = Theme.TextEmphasizedColor, BackgroundColor3 = Theme.AccentColor1, TextXAlignment = Enum.TextXAlignment.Left, Parent = h, AutoButtonColor = false, ZIndex = 6 }); Create("UICorner", { Parent = b }); local a = Create("TextLabel", { Name = "Arrow", Size = UDim2.fromOffset(30,35), Position = UDim2.new(1,-30,0,0), BackgroundTransparency=1, Font=Enum.Font.SourceSans, Text="▼", TextSize=16, TextColor3=Theme.TextColor, ZIndex=7, Parent=b}); local l = Create("ScrollingFrame", { Name = "OptionsList", Size = UDim2.new(1, 0, 0, 120), Position = UDim2.new(0, 0, 1, 5), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, Visible = false, Parent = b, ZIndex = 10, AutomaticCanvasSize=Enum.AutomaticSize.Y }); Create("UICorner", { Parent = l }); Create("UIListLayout", { Padding = UDim.new(0, 2), Parent = l }); local o=false; local cV=options.Default or options.Values[1]; local function sV(v) cV=v; b.Text="  "..tostring(cV); if options.Callback then task.spawn(options.Callback, cV) end end; for _, v in ipairs(options.Values) do local oB=Create("TextButton", { Name=v, Size=UDim2.new(1,0,0,30), Text="  "..v, Font=Theme.FontBody, TextSize=14, TextColor3=Theme.TextColor, BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Left, Parent = l, AutoButtonColor = false }); oB.MouseButton1Click:Connect(function() sV(v); o=false; l.Visible=false; Animate(a,{Rotation=0}); h.Size=UDim2.new(1,0,0,35) end); oB.MouseEnter:Connect(function() Animate(oB, {BackgroundTransparency=0.8, TextColor3=Theme.TextEmphasizedColor}) end); oB.MouseLeave:Connect(function() Animate(oB, {BackgroundTransparency=1, TextColor3=Theme.TextColor}) end) end; b.MouseButton1Click:Connect(function() o=not o;l.Visible=o;Animate(a, {Rotation=o and 180 or 0});if o then h.Size=UDim2.new(1,0,0,160) else h.Size=UDim2.new(1,0,0,35) end end); if key then self.Window.TrackedElements[key] = { GetValue = function() return cV end, SetValue = sV } end; return h end
	function Tab:AddSlider(options) options = options or {}; local key = options.Key; if not key then warn("ModernUI: AddSlider requer uma 'Key'") end; local min, max, default = options.Min or 0, options.Max or 100, options.Default or 50; local h = Create("Frame", { Name = "SliderHolder", Size = UDim2.new(1, 0, 0, 50), BackgroundTransparency = 1, Parent = self.PageContents, LayoutOrder = options.Order or 0 }); Create("TextLabel", { Name = "TitleLabel", Text = options.Title or "Slider", Font = Theme.FontBody, TextSize = 16, TextColor3 = Theme.TextColor, TextXAlignment = Enum.TextXAlignment.Left, Size = UDim2.new(0.7, 0, 0, 16), Parent = h }); local vL = Create("TextLabel", { Name = "ValueLabel", Text = tostring(math.floor(default)), Font = Theme.FontBody, TextSize = 16, TextColor3 = Theme.TextColor, TextXAlignment = Enum.TextXAlignment.Right, Size = UDim2.new(0.3, 0, 0, 16), Position = UDim2.new(0.7, 0, 0, 0), Parent = h }); local t = Create("Frame", { Name = "Track", Size = UDim2.new(1, 0, 0, 6), Position = UDim2.new(0, 0, 0, 30), BackgroundColor3 = Theme.AccentColor1, Parent = h }); Create("UICorner", {Parent = t}); local p = Create("Frame", { Name = "Progress", Size = UDim2.new((default-min)/(max-min), 0, 1, 0), BackgroundColor3 = Theme.PrimaryColor, Parent = t }); Create("UICorner", {Parent = p}); local th = Create("TextButton", { Name = "Thumb", Size = UDim2.fromOffset(18, 18), Position = UDim2.new(p.Size.X.Scale, -9, 0.5, -9), BackgroundColor3 = Theme.TextEmphasizedColor, Parent = t, ZIndex = 6, Text = "" }); Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = th}); local function uSV(v) local cV=math.clamp(v,min,max); local pC=(cV-min)/(max-min); Animate(p,{Size=UDim2.new(pC,0,1,0)}); Animate(th,{Position=UDim2.new(pC,-9,0.5,-9)}); vL.Text=tostring(math.floor(cV)); if options.Callback then task.spawn(options.Callback, cV) end end; local function uSI(iX) local rX=iX-t.AbsolutePosition.X; local pC=math.clamp(rX/t.AbsoluteSize.X,0,1); local v=min+(max-min)*pC; uSV(v) end; th.InputBegan:Connect(function(i) if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then local cM,cE; cM=UserInputService.InputChanged:Connect(function(m) if m.UserInputType==Enum.UserInputType.MouseMovement or m.UserInputType==Enum.UserInputType.Touch then uSI(m.Position.X) end end); cE=UserInputService.InputEnded:Connect(function(e) if e.UserInputType==i.UserInputType then cM:Disconnect(); cE:Disconnect() end end) end end); if key then self.Window.TrackedElements[key]={GetValue=function() return tonumber(vL.Text) end, SetValue=uSV} end; return h end
	function Tab:AddCheckbox(options) options = options or {}; local key = options.Key; if not key then warn("ModernUI: AddCheckbox requer uma 'Key'") end; local iC=options.Default or false; local h=Create("Frame", {Name="CheckboxHolder", Size=UDim2.new(1,0,0,28), BackgroundTransparency=1, Parent=self.PageContents, LayoutOrder=options.Order or 0}); local b=Create("TextButton", {Name="CheckboxButton", Size=UDim2.new(1,0,1,0), BackgroundTransparency=1, Text="", Parent=h}); Create("TextLabel", {Name="Title", Text=options.Title or "Checkbox", Font=Theme.FontBody, TextColor3=Theme.TextColor, TextSize=16, TextXAlignment=Enum.TextXAlignment.Left, Size=UDim2.new(1,-35,1,0), Position=UDim2.new(0,35,0,0), BackgroundTransparency=1, Parent=b}); local box=Create("Frame", {Name="Box", Size=UDim2.fromOffset(20,20), Position=UDim2.new(0,0,0.5,0), AnchorPoint=Vector2.new(0,0.5), BackgroundColor3=Theme.AccentColor1, Parent=b}); Create("UICorner", {Parent=box}); local c=Create("ImageLabel", {Name="Check", Size=UDim2.fromScale(0.8,0.8), Position=UDim2.fromScale(0.5,0.5), AnchorPoint=Vector2.new(0.5,0.5), Image="rbxassetid://3926306380", ImageColor3=Theme.TextEmphasizedColor, BackgroundTransparency=1, ImageTransparency=1, Parent=box}); local function sV(v) iC=v; Animate(c, {ImageTransparency=iC and 0 or 1}, 0.15); Animate(box, {BackgroundColor3=iC and Theme.PrimaryColor or Theme.AccentColor1}); if options.Callback then task.spawn(options.Callback, iC) end end; b.MouseButton1Click:Connect(function() sV(not iC) end); sV(iC); if key then self.Window.TrackedElements[key]={GetValue=function() return iC end, SetValue=sV} end; return h end
	function Tab:AddToggle(options) options=options or {}; local key=options.Key; if not key then warn("ModernUI: AddToggle requer uma 'Key'") end; local iT=options.Default or false; local h=Create("Frame", {Name="ToggleHolder", Size=UDim2.new(1,0,0,28), BackgroundTransparency=1, Parent=self.PageContents, LayoutOrder=options.Order or 0}); local b=Create("TextButton", {Name="ToggleButton", Size=UDim2.new(1,0,1,0), BackgroundTransparency=1, Text="", Parent=h}); Create("TextLabel", {Name="Title", Text=options.Title or "Toggle", Font=Theme.FontBody, TextColor3=Theme.TextColor, TextSize=16, TextXAlignment=Enum.TextXAlignment.Left, Size=UDim2.new(1,-55,1,0), BackgroundTransparency=1, Parent=b}); local t=Create("Frame", {Name="Track", Size=UDim2.new(0,40,0,20), Position=UDim2.new(1,0,0.5,0), AnchorPoint=Vector2.new(1,0.5), BackgroundColor3=Theme.AccentColor1, Parent=b}); Create("UICorner", {CornerRadius=UDim.new(1,0), Parent=t}); local th=Create("Frame", {Name="Thumb", Size=UDim2.fromOffset(16,16), Position=UDim2.new(0,2,0.5,0), AnchorPoint=Vector2.new(0,0.5), BackgroundColor3=Theme.TextEmphasizedColor, Parent=t}); Create("UICorner", {CornerRadius=UDim.new(1,0), Parent=th}); local function sV(v) iT=v; Animate(th,{Position=iT and UDim2.new(1,-2,0.5,0) or UDim2.new(0,2,0.5,0), AnchorPoint=iT and Vector2.new(1,0.5) or Vector2.new(0,0.5)}); Animate(t,{BackgroundColor3=iT and Theme.PrimaryColor or Theme.AccentColor1}); if options.Callback then task.spawn(options.Callback, iT) end end; b.MouseButton1Click:Connect(function() sV(not iT) end); sV(iT); if key then self.Window.TrackedElements[key]={GetValue=function() return iT end, SetValue=sV} end; return h end
	function Tab:AddTextInput(options) options=options or {}; local h=Create("Frame",{Name="TextInputHolder",Size=UDim2.new(1,0,0,60),BackgroundTransparency=1,Parent=self.PageContents,LayoutOrder=options.Order or 0}); Create("TextLabel",{Name="Title",Text=options.Title or "Input",Font=Theme.FontBody,TextColor3=Theme.TextColor,TextSize=16,TextXAlignment=Enum.TextXAlignment.Left,Size=UDim2.new(1,0,0,20),BackgroundTransparency=1,Parent=h}); local tb=Create("TextBox",{Name="Input",Text=options.Default or "",Font=Theme.FontBody,TextSize=15,TextColor3=Theme.TextEmphasizedColor,BackgroundColor3=Theme.AccentColor1,Size=UDim2.new(1,0,0,35),Position=UDim2.new(0,0,0,25),ClearTextOnFocus=false,Parent=h,TextXAlignment=Enum.TextXAlignment.Left,}); Create("UICorner",{CornerRadius=UDim.new(0,Theme.CornerRadius-2),Parent=tb}); Create("UIPadding",{PaddingLeft=UDim.new(0,10),PaddingRight=UDim.new(0,10),Parent=tb}); local el={CurrentValue=options.Default or "",SetValue=function(t) tb.Text=t; el.CurrentValue=t end,GetValue=function() return el.CurrentValue end}; tb.FocusLost:Connect(function(eP) el.CurrentValue=tb.Text; if options.Callback then task.spawn(options.Callback,tb.Text) end end); if options.Key then self.Window.TrackedElements[options.Key]=el end; return el end
	
end
-- =================================================================================================
-- || FIM DA BIBLIOTECA 'ModernUI' ||
-- =================================================================================================


-- =================================================================================================
-- || INÍCIO DO SEU SCRIPT 'BLUE HEATER 2' ||
-- =================================================================================================

-- 1. Cria a janela principal usando a biblioteca aprimorada
local Window = ModernUI.CreateWindow({ 
 	Title = "Blue Heater 2 | Made By VoidOrcus", 
 	Size = UDim2.fromOffset(550, 450) -- Aumentei um pouco a altura para acomodar melhor o layout
}) 

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- 2. Cria as abas e adiciona os componentes
-- Aba "Player"
local PlayerTab = Window:AddTab({ Name = "Player", Section = "Middle" }) 
PlayerTab:AddLabel({ Title = "Funções do Jogador:" }) 
PlayerTab:AddToggle({ 
    Title = "Inf Stamina",
    Key = "InfStaminaToggle",
    Callback = function(value) print("Inf Stamina alterada para:", value) end
})
PlayerTab:AddButton({ Title = "Ativar Godmode", Callback = function() print("Godmode ativado!") end }) 
PlayerTab:AddSlider({ Title = "Velocidade", Min = 16, Max = 200, Default = 16, Key = "PlayerSpeed" }) 

-- Aba "Farm"
local FarmTab = Window:AddTab({ Name = "Farm", Section = "Middle" }) 
FarmTab:AddLabel({ Title = "Funções de Farm:" }) 
FarmTab:AddButton({ Title = "Coletar Baús Próximos", Callback = function() print("Coletando baús...") end }) 
FarmTab:AddDropdown({ Title = "Selecionar Mob", Values = {"Goblin", "Slime", "Orc"}, Default = "Slime", Key = "MobFarm" })

-- Aba de Configurações
local MySettingsTab = Window:AddTab({ Name = "Configurações", Section = "Bottom"})
MySettingsTab:AddLabel({Title = "Minhas Configurações:"})
MySettingsTab:AddCheckbox({Title = "Ativar Notificações", Default=true, Key="EnableNotifications"})
MySettingsTab:AddButton({Title = "Destruir UI", Callback = function() Window.ScreenGui:Destroy() end})


-- 3. Cria o display do avatar na seção SUPERIOR
local topSection = Window.SidebarSections.Top 
local AvatarContainer = Instance.new("Frame", topSection)
AvatarContainer.Name = "AvatarContainer" 
AvatarContainer.Size = UDim2.new(1, 0, 0, 130)
AvatarContainer.BackgroundTransparency = 1 

local AvatarFrame = Instance.new("Frame", AvatarContainer)
AvatarFrame.Name = "AvatarFrame" 
AvatarFrame.Size = UDim2.new(0, 80, 0, 80)
AvatarFrame.Position = UDim2.new(0.5, 0, 0, 10)
AvatarFrame.AnchorPoint = Vector2.new(0.5, 0)
AvatarFrame.BackgroundColor3 = ModernUI.Theme.AccentColor1 
AvatarFrame.BorderSizePixel = 0 
Instance.new("UICorner", AvatarFrame).CornerRadius = UDim.new(0.5, 0)

Instance.new("UIStroke", AvatarFrame).Thickness = 2 

local function LoadPlayerAvatar() 
 	local player = Players.LocalPlayer; local userId = player.UserId 
 	local AvatarImage = Instance.new("ImageLabel", AvatarFrame)
 	AvatarImage.Name = "AvatarImage"; AvatarImage.Size = UDim2.new(1, 0, 1, 0)
 	AvatarImage.BackgroundTransparency = 1; AvatarImage.ScaleType = Enum.ScaleType.Crop;
 	Instance.new("UICorner", AvatarImage).CornerRadius = UDim.new(0.5, 0)
 	local success, result = pcall(function() return Players:GetUserThumbnailAsync(userId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420) end)
	if success and result then AvatarImage.Image = result else AvatarImage.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png" end
end 

local PlayerNameLabel = Instance.new("TextLabel", AvatarContainer)
PlayerNameLabel.Name = "PlayerName"; PlayerNameLabel.Size = UDim2.new(1, 0, 0, 25); PlayerNameLabel.Position = UDim2.new(0.5, 0, 0, 95)
PlayerNameLabel.AnchorPoint = Vector2.new(0.5, 0)
PlayerNameLabel.BackgroundTransparency = 1; PlayerNameLabel.Text = Players.LocalPlayer.DisplayName or Players.LocalPlayer.Name 
PlayerNameLabel.TextColor3 = ModernUI.Theme.TextEmphasizedColor; PlayerNameLabel.Font = ModernUI.Theme.FontBody
PlayerNameLabel.TextSize = 14; PlayerNameLabel.TextXAlignment = Enum.TextXAlignment.Center 

LoadPlayerAvatar() 

-- 4. Cria e configura o mostrador de FPS na seção INFERIOR
local bottomSection = Window.SidebarSections.Bottom 
local FpsLabel = Instance.new("TextLabel", bottomSection)
FpsLabel.Name = "FpsCounter"; FpsLabel.Size = UDim2.new(1, 0, 0, 30); FpsLabel.LayoutOrder = 99
FpsLabel.BackgroundColor3 = ModernUI.Theme.AccentColor1; FpsLabel.BackgroundTransparency = 0.5 
FpsLabel.TextColor3 = ModernUI.Theme.TextEmphasizedColor; FpsLabel.Font = ModernUI.Theme.FontBody 
FpsLabel.TextSize = 16; FpsLabel.Text = "FPS: ..."; 
Instance.new("UICorner", FpsLabel).CornerRadius = UDim.new(0, 4)

local frameCounter, lastUpdate = 0, 0 
RunService.RenderStepped:Connect(function() 
 	local currentTime = tick(); frameCounter = frameCounter + 1 
 	if (currentTime - lastUpdate) >= 0.5 then 
 		local fps = math.floor(frameCounter / (currentTime - lastUpdate)) 
 		FpsLabel.Text = "FPS: " .. tostring(fps) 
 		if fps >= 50 then FpsLabel.BackgroundColor3 = Color3.fromRGB(0, 180, 0) elseif fps >= 30 then FpsLabel.BackgroundColor3 = Color3.fromRGB(255, 200, 0) else FpsLabel.BackgroundColor3 = Color3.fromRGB(255, 0, 0) end 
 		frameCounter = 0; lastUpdate = currentTime 
 	end 
end) 

print("Blue Heater 2 UI (Versão Aprimorada) carregada!")
