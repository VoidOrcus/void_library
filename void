-- ===================================================================================
-- || BIBLIOTECA MODERN UI (VERSÃO 9.0 - RECONSTRUÍDA DO ZERO) ||
-- ===================================================================================
--[[
	Autor: Gemini (a seu pedido)
	Descrição: Uma biblioteca de UI moderna, robusta e modular para Roblox.
	Funcionalidades:
		- Janela arrastável com barra de título.
		- Botões de fechar, minimizar e maximizar.
		- Paginação de abas na vertical com scroll automático.
		- Componentes: Botão, Label, Slider, Dropdown, Checkbox, Toggle.
		- Sistema de tema para fácil customização.
		- Animações suaves em todas as interações.
]]
local ModernUI = (function()
	local Lib = {}
	Lib.__index = Lib

	local Tab = {}
	Tab.__index = Tab

	--================================================================
	-- SERVIÇOS
	--================================================================
	local TweenService = game:GetService("TweenService")
	local UserInputService = game:GetService("UserInputService")
	local CoreGui = game:GetService("CoreGui")

	--================================================================
	-- TEMA PADRÃO
	--================================================================
	local Theme = {
		Background = Color3.fromRGB(21, 23, 29),
		Primary = Color3.fromRGB(30, 32, 40),
		Secondary = Color3.fromRGB(40, 42, 52),
		Accent = Color3.fromRGB(88, 110, 245),
		Text = Color3.fromRGB(200, 200, 200),
		TextMuted = Color3.fromRGB(120, 120, 120),
		Close = Color3.fromRGB(237, 66, 69),
		FontTitle = Enum.Font.GothamSemibold,
		FontBody = Enum.Font.Gotham,
		AnimationSpeed = 0.2,
		CornerRadius = 6,
	}

	--================================================================
	-- FUNÇÕES AUXILIARES
	--================================================================
	local function Create(instanceType, properties)
		local inst = Instance.new(instanceType)
		for prop, value in pairs(properties or {}) do
			inst[prop] = value
		end
		return inst
	end

	local function Animate(instance, goal)
		local tween = TweenService:Create(instance, TweenInfo.new(Theme.AnimationSpeed, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), goal)
		tween:Play()
		return tween
	end

	--================================================================
	-- CRIAÇÃO DA JANELA PRINCIPAL
	--================================================================
	function Lib.CreateWindow(options)
		local self = setmetatable({}, Lib)
		options = options or {}
		
		self.Tabs = {}
		self.ActiveTab = nil
		self.OriginalProperties = {}

		-- Cria a base da UI
		self.ScreenGui = Create("ScreenGui", { Name = "ModernUI", Parent = CoreGui, ZIndexBehavior = Enum.ZIndexBehavior.Global, ResetOnSpawn = false })
		self.Window = Create("Frame", {
			Name = "Window", Size = options.Size or UDim2.fromOffset(600, 400), Position = UDim2.fromScale(0.5, 0.5), AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = Theme.Primary, BorderSizePixel = 0, Parent = self.ScreenGui, ClipsDescendants = true,
		})
		self.OriginalProperties = { Size = self.Window.Size, Position = self.Window.Position }
		Create("UICorner", { CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = self.Window })

		-- BARRA DE TÍTULO
		local TitleBar = Create("Frame", { Name = "TitleBar", Size = UDim2.new(1, 0, 0, 35), BackgroundColor3 = Theme.Secondary, BorderSizePixel = 0, Parent = self.Window, ZIndex = 2 })
		Create("TextLabel", { Name = "Title", Size = UDim2.new(1, -95, 1, 0), Position = UDim2.fromOffset(15, 0), BackgroundTransparency = 1, Font = Theme.FontTitle, Text = options.Title or "ModernUI", TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, TextSize = 16, ZIndex = 3, Parent = TitleBar })

		-- LÓGICA PARA ARRASTAR A JANELA
		TitleBar.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				local dragStart = input.Position
				local startPos = self.Window.Position
				local moveConn, endConn
				moveConn = input.Changed:Connect(function()
					local newPos = input.Position
					self.Window.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + (newPos.X - dragStart.X), startPos.Y.Scale, startPos.Y.Offset + (newPos.Y - dragStart.Y))
				end)
				endConn = UserInputService.InputEnded:Connect(function(endInput)
					if endInput == input then
						moveConn:Disconnect()
						endConn:Disconnect()
					end
				end)
			end
		end)

		-- BOTÕES DA JANELA (FECHAR, MINIMIZAR, MAXIMIZAR)
		local WindowButtons = Create("Frame", { Name = "WindowButtons", Size = UDim2.fromOffset(80, 35), Position = UDim2.new(1, -85, 0, 0), BackgroundTransparency = 1, Parent = TitleBar, ZIndex = 4 })
		Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 5), Parent = WindowButtons })

		local function CreateWinBtn(name, order, iconFunc, hoverColor)
			local btn = Create("TextButton", {Name=name, LayoutOrder=order, Size=UDim2.fromOffset(22, 22), BackgroundColor3=Theme.Secondary, Text="", Parent=WindowButtons, AutoButtonColor=false, ZIndex=5})
			Create("UICorner", {CornerRadius = UDim.new(0, 4), Parent=btn}); iconFunc(btn)
			btn.MouseEnter:Connect(function() Animate(btn, {BackgroundColor3 = hoverColor}) end)
			btn.MouseLeave:Connect(function() Animate(btn, {BackgroundColor3 = Theme.Secondary}) end)
			return btn
		end

		local Minimize = CreateWinBtn("Minimize", 1, function(p) Create("Frame",{Size=UDim2.new(0.5,0,0,2), Position=UDim2.fromScale(0.5,0.5), AnchorPoint=Vector2.new(0.5,0.5), BackgroundColor3=Theme.TextMuted, BorderSizePixel=0, Parent=p}) end, Theme.Primary)
		local Maximize = CreateWinBtn("Maximize", 2, function(p) Create("Frame",{Size=UDim2.new(0.4,0,0.4,0), Position=UDim2.fromScale(0.5,0.5), AnchorPoint=Vector2.new(0.5,0.5), BackgroundTransparency=1, BorderColor3=Theme.TextMuted, BorderSizePixel=2, Parent=p}) end, Theme.Primary)
		local Close = CreateWinBtn("Close", 3, function(p) local l1=Create("Frame",{Size=UDim2.new(0.6,0,0,2), Rotation=45, Parent=p}); local l2=l1:Clone();l2.Rotation=-45;l2.Parent=p; for _,l in pairs(p:GetChildren()) do if l:IsA("Frame") then l.Position=UDim2.fromScale(0.5,0.5);l.AnchorPoint=Vector2.new(0.5,0.5);l.BackgroundColor3=Theme.TextMuted end end end, Theme.Close)

		Close.MouseButton1Click:Connect(function() self.ScreenGui:Destroy() end)
		Minimize.MouseButton1Click:Connect(function() Animate(self.Window, {Size = UDim2.new(self.Window.Size.X.Scale, self.Window.Size.X.Offset, 0, 35)}) end)
		TitleBar.MouseButton1Click:Connect(function() if self.Window.Size.Y.Offset == 35 then Animate(self.Window, {Size = self.OriginalProperties.Size}) end end) -- Restaurar ao clicar no título
		Maximize.MouseButton1Click:Connect(function()
			local isMax = self.Window.Size == UDim2.new(1,0,1,0)
			Animate(self.Window, { Size = isMax and self.OriginalProperties.Size or UDim2.new(1,0,1,0), Position = isMax and self.OriginalProperties.Position or UDim2.fromScale(0.5,0.5) })
		end)

		-- LAYOUT PRINCIPAL (SIDEBAR + CONTEÚDO)
		local MainFrame = Create("Frame", { Name = "MainFrame", Size = UDim2.new(1, 0, 1, -35), Position = UDim2.fromOffset(0, 35), BackgroundTransparency = 1, Parent = self.Window })
		local Sidebar = Create("Frame", { Name = "Sidebar", Size = UDim2.new(0, 160, 1, 0), BackgroundColor3 = Theme.Primary, BorderSizePixel = 0, Parent = MainFrame })
		self.PageContainer = Create("Frame", { Name = "PageContainer", Size = UDim2.new(1, -160, 1, 0), Position = UDim2.fromOffset(160, 0), BackgroundColor3 = Theme.Background, ClipsDescendants = true, Parent = MainFrame })
		Create("UICorner", {CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = self.PageContainer})

		self.TabContainer = Create("ScrollingFrame", { Name="TabContainer", Size=UDim2.new(1,0,1,0), BackgroundTransparency=1, BorderSizePixel=0, ScrollingDirection=Enum.ScrollingDirection.Y, ScrollBarThickness=4, ScrollBarImageColor3=Theme.Accent, Parent=Sidebar })
		Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = self.TabContainer })
		Create("UIPadding", { PaddingLeft = UDim.new(0,10), PaddingRight = UDim.new(0,10), PaddingTop = UDim.new(0,10), Parent=self.TabContainer })

		return self
	end

	--================================================================
	-- CRIAÇÃO DE ABAS (PÁGINAS)
	--================================================================
	function Lib:AddTab(name)
		local tab = setmetatable({}, Tab)
		tab.Window = self
		tab.Name = name

		tab.Page = Create("ScrollingFrame", {
			Name = name, Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, BorderSizePixel = 0, Visible = #self.Tabs == 0,
			AutomaticCanvasSize = Enum.AutomaticSize.Y, ScrollingDirection = Enum.ScrollingDirection.Y, ScrollBarThickness = 4, ScrollBarImageColor3 = Theme.Accent,
			Parent = self.PageContainer,
		})
		Create("UIListLayout", { Padding = UDim.new(0, 10), Parent = tab.Page })
		Create("UIPadding", { PaddingAll = UDim.new(0, 15), Parent = tab.Page })

		tab.Button = Create("TextButton", {
			Name = name, Size = UDim2.new(1, 0, 0, 35), Text = "  " .. name, Font = Theme.FontBody, TextSize = 16,
			TextColor3 = Theme.TextMuted, TextXAlignment = Enum.TextXAlignment.Left, BackgroundColor3 = Theme.Primary, AutoButtonColor = false,
			Parent = self.TabContainer,
		})
		Create("UICorner", { CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = tab.Button })
		local Indicator = Create("Frame", {Name="Indicator", Size=UDim2.new(0,3,0.7,0), Position=UDim2.fromScale(0,0.5), AnchorPoint=Vector2.new(0,0.5), BackgroundColor3=Theme.Accent, BorderSizePixel=0, Visible=false, Parent=tab.Button})
		Create("UICorner", {Parent=Indicator})

		table.insert(self.Tabs, tab)
		
		local function SetActive()
			if self.ActiveTab == tab then return end
			if self.ActiveTab then
				self.ActiveTab.Page.Visible = false
				Animate(self.ActiveTab.Button, { BackgroundColor3 = Theme.Primary, TextColor3 = Theme.TextMuted })
				Animate(self.ActiveTab.Button.Indicator, {Visible = false})
			end
			self.ActiveTab = tab
			self.ActiveTab.Page.Visible = true
			Animate(self.ActiveTab.Button, { BackgroundColor3 = Theme.Secondary, TextColor3 = Theme.Text })
			Animate(self.ActiveTab.Button.Indicator, {Visible = true})
		end
		
		tab.Button.MouseButton1Click:Connect(SetActive)
		if #self.Tabs == 1 then SetActive() end
		
		return tab
	end

	--================================================================
	-- MÉTODOS DOS COMPONENTES
	--================================================================
	function Tab:AddLabel(options)
		Create("TextLabel", {Size = UDim2.new(1,0,0,20), BackgroundTransparency = 1, Font = Theme.FontBody, Text = options.Title, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, TextSize = 16, Parent = self.Page})
	end
	
	function Tab:AddButton(options)
		local btn = Create("TextButton", {Size = UDim2.new(1,0,0,35), BackgroundColor3 = Theme.Accent, Font = Theme.FontBody, Text = options.Title, TextColor3 = Theme.Text, TextSize = 15, Parent = self.Page, AutoButtonColor=false})
		Create("UICorner", {CornerRadius = UDim.new(0,Theme.CornerRadius), Parent=btn})
		btn.MouseButton1Click:Connect(function() if options.Callback then options.Callback() end end)
	end
	
	function Tab:AddCheckbox(options)
		local holder = Create("TextButton", {Size=UDim2.new(1,0,0,25), BackgroundTransparency=1, Text="", Parent=self.Page})
		local box = Create("Frame", {Size=UDim2.fromOffset(20,20), Position=UDim2.fromScale(0,0.5), AnchorPoint=Vector2.new(0,0.5), BackgroundColor3=Theme.Secondary, Parent=holder}); Create("UICorner",{Parent=box})
		local check = Create("ImageLabel", {Size=UDim2.fromScale(0.8,0.8), Position=UDim2.fromScale(0.5,0.5), AnchorPoint=Vector2.new(0.5,0.5), Image="rbxassetid://3926306380", ImageColor3=Theme.Text, BackgroundTransparency=1, ImageTransparency=1, Parent=box})
		Create("TextLabel", {Size=UDim2.new(1,-30,1,0), Position=UDim2.fromOffset(30,0), BackgroundTransparency=1, Font=Theme.FontBody, Text=options.Title, TextColor3=Theme.Text, TextXAlignment=Enum.TextXAlignment.Left, TextSize=15, Parent=holder})
		local isChecked = options.Default or false
		local function SetValue(val) isChecked=val; Animate(check,{ImageTransparency=isChecked and 0 or 1}); Animate(box,{BackgroundColor3=isChecked and Theme.Accent or Theme.Secondary}); if options.Callback then options.Callback(isChecked) end end
		holder.MouseButton1Click:Connect(function() SetValue(not isChecked) end); SetValue(isChecked)
	end

	function Tab:AddToggle(options)
		local holder = Create("TextButton", {Size=UDim2.new(1,0,0,25), BackgroundTransparency=1, Text="", Parent=self.Page})
		Create("TextLabel", {Size=UDim2.new(1,-50,1,0), Position=UDim2.fromOffset(0,0), BackgroundTransparency=1, Font=Theme.FontBody, Text=options.Title, TextColor3=Theme.Text, TextXAlignment=Enum.TextXAlignment.Left, TextSize=15, Parent=holder})
		local track = Create("Frame", {Size=UDim2.fromOffset(40,20), Position=UDim2.new(1,0,0.5,0), AnchorPoint=Vector2.new(1,0.5), BackgroundColor3=Theme.Secondary, Parent=holder}); Create("UICorner",{CornerRadius=UDim.new(1,0),Parent=track})
		local thumb = Create("Frame", {Size=UDim2.fromOffset(16,16), Position=UDim2.new(0,2,0.5,0), AnchorPoint=Vector2.new(0,0.5), BackgroundColor3=Theme.Text, Parent=track}); Create("UICorner",{CornerRadius=UDim.new(1,0),Parent=thumb})
		local isToggled = options.Default or false
		local function SetValue(val) isToggled=val; Animate(thumb,{Position=isToggled and UDim2.new(1,-2,0.5,0) or UDim2.new(0,2,0.5,0), AnchorPoint=isToggled and Vector2.new(1,0.5) or Vector2.new(0,0.5)}); Animate(track,{BackgroundColor3=isToggled and Theme.Accent or Theme.Secondary}); if options.Callback then options.Callback(isToggled) end end
		holder.MouseButton1Click:Connect(function() SetValue(not isToggled) end); SetValue(isToggled)
	end

	function Tab:AddSlider(options)
		local min, max, default = options.Min or 0, options.Max or 100, options.Default or 0
		local holder = Create("Frame", {Size=UDim2.new(1,0,0,40), BackgroundTransparency=1, Parent=self.Page})
		local title = Create("TextLabel", {Size=UDim2.new(1, -60, 0, 15), BackgroundTransparency=1, Font=Theme.FontBody, Text=options.Title, TextColor3=Theme.Text, TextXAlignment=Enum.TextXAlignment.Left, TextSize=15, Parent=holder})
		local valueLabel = Create("TextLabel", {Size=UDim2.new(0,50,0,15), Position=UDim2.new(1,-50,0,0), BackgroundTransparency=1, Font=Theme.FontBody, TextColor3=Theme.Text, TextXAlignment=Enum.TextXAlignment.Right, TextSize=15, Parent=holder})
		local track = Create("Frame", {Name="Track", Size=UDim2.new(1,0,0,6), Position=UDim2.new(0,0,1,-6), AnchorPoint=Vector2.new(0,1), BackgroundColor3=Theme.Secondary, Parent=holder}); Create("UICorner",{Parent=track})
		local progress = Create("Frame", {Name="Progress", BackgroundColor3=Theme.Accent, Parent=track}); Create("UICorner",{Parent=progress})
		local thumb = Create("TextButton", {Name="Thumb", Size=UDim2.fromOffset(16,16), BackgroundColor3=Theme.Text, ZIndex=2, Text="", Parent=track}); Create("UICorner",{CornerRadius=UDim.new(1,0),Parent=thumb})
		
		local function UpdateFromValue(value)
			local clamped = math.clamp(value, min, max)
			local percent = (clamped-min)/(max-min)
			progress.Size = UDim2.new(percent,0,1,0)
			thumb.Position = UDim2.new(percent, -thumb.AbsoluteSize.X/2, 0.5, -thumb.AbsoluteSize.Y/2)
			valueLabel.Text = tostring(math.floor(clamped))
			if options.Callback then options.Callback(clamped) end
		end
		local function UpdateFromInput(inputX)
			local percent = math.clamp((inputX - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
			local value = min + (max-min) * percent; UpdateFromValue(value)
		end
		thumb.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				local moveConn, endConn
				moveConn = input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.Change then UpdateFromInput(input.Position.X) end end)
				endConn = UserInputService.InputEnded:Connect(function(endInput) if endInput.UserInputType == input.UserInputType then moveConn:Disconnect(); endConn:Disconnect() end end)
			end
		end)
		UpdateFromValue(default)
	end
	
	function Tab:AddDropdown(options)
		local holder = Create("Frame", {Size=UDim2.new(1,0,0,35), BackgroundTransparency=1, ZIndex=10, Parent=self.Page})
		local main = Create("TextButton", {Name="Main", Size=UDim2.new(1,0,1,0), BackgroundColor3=Theme.Secondary, Font=Theme.FontBody, Text=" "..tostring(options.Default or options.Values[1]), TextColor3=Theme.Text, TextSize=15, TextXAlignment=Enum.TextXAlignment.Left, Parent=holder, AutoButtonColor=false}); Create("UICorner",{Parent=main})
		local arrow = Create("TextLabel", {Size=UDim2.fromOffset(20,20), Position=UDim2.new(1,-25,0.5,0), AnchorPoint=Vector2.new(0.5,0.5), BackgroundTransparency=1, Font=Theme.FontBody, Text="▼", TextColor3=Theme.TextMuted, TextSize=16, Parent=main})
		local list = Create("ScrollingFrame", {Name="List", Size=UDim2.new(1,0,0,100), Position=UDim2.new(0,0,1,5), BackgroundColor3=Theme.Secondary, BorderSizePixel=0, Visible=false, Parent=holder, ZIndex=20, AutomaticCanvasSize=Enum.AutomaticSize.Y}); Create("UICorner",{Parent=list}); Create("UIListLayout", {Padding=UDim.new(0,2), Parent=list})
		local isOpen = false
		local function SetValue(value) main.Text=" "..tostring(value); if options.Callback then options.Callback(value) end end
		for _, v in pairs(options.Values) do
			local btn = Create("TextButton", {Size=UDim2.new(1,0,0,30), BackgroundTransparency=1, Font=Theme.FontBody, Text=" "..tostring(v), TextColor3=Theme.Text, TextSize=15, TextXAlignment=Enum.TextXAlignment.Left, Parent=list, AutoButtonColor=false})
			btn.MouseButton1Click:Connect(function() SetValue(v); isOpen=false; list.Visible=false; Animate(arrow, {Rotation = 0}); holder.Size = UDim2.new(1,0,0,35) end)
			btn.MouseEnter:Connect(function() Animate(btn, {BackgroundColor3 = Theme.Primary}) end)
			btn.MouseLeave:Connect(function() Animate(btn, {BackgroundColor3 = Theme.Secondary}) end)
		end
		main.MouseButton1Click:Connect(function() isOpen = not isOpen; list.Visible=isOpen; Animate(arrow, {Rotation = isOpen and 180 or 0}); holder.Size = UDim2.new(1,0,0, isOpen and 140 or 35) end)
	end

	return Lib
end)()
