--[[
	ModernUI Library
	Autor: VoidOrcus (com assistência da IA Gemini)
	Descrição: Uma biblioteca de UI moderna para Roblox, inspirada em sistemas operacionais.
	Versão: 3.3 - Adiciona ScrollingFrame às páginas de conteúdo e corrige escopo de Tema.
]]

local ModernUI = {}
ModernUI.__index = ModernUI

local Tab = {}
Tab.__index = Tab

--================================================================
-- SERVIÇOS E CONSTANTES
--================================================================
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

--================================================================
-- CONFIGURAÇÃO DE TEMA ("Solarized Dark")
--================================================================
ModernUI.Theme = {
	BackgroundColor = Color3.fromRGB(0, 43, 54),
	AccentColor1 = Color3.fromRGB(7, 54, 66),
	TextColor = Color3.fromRGB(131, 148, 150),
	TextEmphasizedColor = Color3.fromRGB(147, 161, 161),
	PrimaryColor = Color3.fromRGB(38, 139, 210),
	CloseColor = Color3.fromRGB(220, 50, 47),
	FontTitle = Enum.Font.Code,
	FontBody = Enum.Font.Code,
	CornerRadius = 4,
	AnimationSpeed = 0.2,
}

--================================================================
-- FUNÇÕES AUXILIARES
--================================================================
local function Create(instanceType, properties)
	local inst = Instance.new(instanceType)
	for prop, value in pairs(properties or {}) do
		inst[prop] = value
	end
	return inst
end

local function Animate(instance, goal, speed)
	speed = speed or ModernUI.Theme.AnimationSpeed
	local tweenInfo = TweenInfo.new(speed, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
	local tween = TweenService:Create(instance, tweenInfo, goal)
	tween:Play()
	return tween
end

--================================================================
-- CRIAÇÃO DA JANELA PRINCIPAL
--================================================================
function ModernUI.CreateWindow(options)
	local self = setmetatable({}, ModernUI)
	options = options or {}

	self.Theme = ModernUI.Theme
	local Theme = self.Theme

	local title = options.Title or "ModernUI"
	local size = options.Size or UDim2.fromOffset(600, 450)
	local position = options.Position or UDim2.fromScale(0.5, 0.5)

	self.Tabs = {}
	self.Pages = {}
	self.ActiveTabIndex = 1

	self.ScreenGui = Create("ScreenGui", { Name = "ModernUI_ScreenGui_"..math.random(1,10000), Parent = CoreGui, ZIndexBehavior = Enum.ZIndexBehavior.Global, ResetOnSpawn = false })
	if syn and syn.protect_gui then pcall(syn.protect_gui, self.ScreenGui) end

	self.WindowFrame = Create("Frame", { Name = "WindowFrame", Size = size, Position = position, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Theme.BackgroundColor, BackgroundTransparency = 0.6, BorderSizePixel = 0, Parent = self.ScreenGui, ClipsDescendants = true })
	Create("UICorner", { CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = self.WindowFrame })
	Create("UIStroke", { Thickness = 1, Color = Theme.AccentColor1, Transparency = 0.5, Parent = self.WindowFrame })
	
	local TitleBar = Create("Frame", { Name = "TitleBar", Size = UDim2.new(1, 0, 0, 32), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, Parent = self.WindowFrame, ZIndex = 4 })
	local TitleLabel = Create("TextLabel", { Name = "TitleLabel", Size = UDim2.new(1, -70, 1, 0), Position = UDim2.fromOffset(10, 0), BackgroundTransparency = 1, Font = Theme.FontTitle, TextColor3 = Theme.TextEmphasizedColor, Text = "  > " .. title, TextXAlignment = Enum.TextXAlignment.Left, TextSize = 15, Parent = TitleBar, ZIndex = 5 })
	
	local MainContent = Create("Frame", { Name = "MainContent", Size = UDim2.new(1, 0, 1, -32), Position = UDim2.fromOffset(0, 32), BackgroundTransparency = 1, Parent = self.WindowFrame })
	Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, SortOrder = Enum.SortOrder.LayoutOrder, Parent = MainContent })

	self.Sidebar = Create("ScrollingFrame", { Name = "Sidebar", Size = UDim2.fromOffset(140, 0), SizeConstraint = Enum.SizeConstraint.RelativeYY, BackgroundColor3 = Theme.BackgroundColor, BackgroundTransparency = 0.3, Parent = MainContent, BorderSizePixel = 0, ScrollingDirection = Enum.ScrollingDirection.Y, ScrollBarImageColor3 = Theme.PrimaryColor, ScrollBarThickness = 4, })
	Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, HorizontalAlignment = Enum.HorizontalAlignment.Center, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 10), Parent = self.Sidebar })
	Create("Frame", { Name = "TopSeparator", Size = UDim2.new(1, -20, 0, 1), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, LayoutOrder = 1, Parent = self.Sidebar })
	self.TabButtonContainer = Create("Frame", { Name = "TabButtonContainer", Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, BackgroundTransparency = 1, LayoutOrder = 2, Parent = self.Sidebar })
	Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), HorizontalAlignment = Enum.HorizontalAlignment.Center, Parent = self.TabButtonContainer })
	Create("Frame", { Name = "BottomSeparator", Size = UDim2.new(1, -20, 0, 1), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, LayoutOrder = 3, Parent = self.Sidebar })
	
	Create("Frame", { Name = "Separator", Size = UDim2.new(0, 1, 1, 0), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, Parent = MainContent })
	self.PageContainer = Create("Frame", { Name = "PageContainer", Size = UDim2.new(1, -141, 1, 0), BackgroundTransparency = 1, ClipsDescendants = true, Parent = MainContent })
	
	local WindowButtonsFrame = Create("Frame", { Name = "WindowButtons", Size = UDim2.fromOffset(64, 32), Position = UDim2.new(1, -64, 0, 0), BackgroundTransparency = 1, Parent = TitleBar, ZIndex = 6 })
	Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, VerticalAlignment = Enum.VerticalAlignment.Center, Parent = WindowButtonsFrame})
	local CloseButton = Create("ImageButton", { Name = "Close", Size = UDim2.fromOffset(32, 32), BackgroundTransparency = 1, Image = "rbxassetid://138186698594149", ImageColor3 = Theme.TextColor, Parent = WindowButtonsFrame })
	local MinimizeButton = Create("ImageButton", { Name = "Minimize", Size = UDim2.fromOffset(32, 32), BackgroundTransparency = 1, Image = "rbxassetid://134256276414393", ImageColor3 = Theme.TextColor, Parent = WindowButtonsFrame })
	CloseButton.MouseEnter:Connect(function() Animate(CloseButton, {ImageColor3 = Theme.CloseColor, BackgroundColor3 = Theme.AccentColor1, BackgroundTransparency = 0.5}) end)
	CloseButton.MouseLeave:Connect(function() Animate(CloseButton, {ImageColor3 = Theme.TextColor, BackgroundTransparency = 1}) end)
	CloseButton.MouseButton1Click:Connect(function() self.ScreenGui:Destroy() end)
	MinimizeButton.MouseEnter:Connect(function() Animate(MinimizeButton, {BackgroundColor3 = Theme.AccentColor1, BackgroundTransparency = 0.5}) end)
	MinimizeButton.MouseLeave:Connect(function() Animate(MinimizeButton, {BackgroundTransparency = 1}) end)
	local isMinimized = false
	MinimizeButton.MouseButton1Click:Connect(function() isMinimized = not isMinimized; MainContent.Visible = not isMinimized; local mSize = UDim2.new(size.X.Scale, size.X.Offset, 0, TitleBar.AbsoluteSize.Y); Animate(self.WindowFrame, {Size = isMinimized and mSize or size}) end)
	
	local dragging=false; local dStart, sPos; TitleBar.InputBegan:Connect(function(i) if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then dragging,dStart,sPos=true,i.Position,self.WindowFrame.Position; local c; c=i.Changed:Connect(function() if i.UserInputState==Enum.UserInputState.End then dragging=false; c:Disconnect() end end) end end); UserInputService.InputChanged:Connect(function(i) if(i.UserInputType==Enum.UserInputType.MouseMovement or i.UserInputType==Enum.UserInputType.Touch)and dragging then self.WindowFrame.Position=UDim2.new(sPos.X.Scale,sPos.X.Offset+(i.Position.X-dStart.X),sPos.Y.Scale,sPos.Y.Offset+(i.Position.Y-dStart.Y))end end)
	
	self.WindowFrame.Position = position + UDim2.fromOffset(0, 20)
	Animate(self.WindowFrame, {Position = position})
	return self
end

function ModernUI:SwitchToTab(pageIndex)
	if not self.Pages[pageIndex] or self.ActiveTabIndex == pageIndex then return end
	local Theme = self.Theme
	local oldPage = self.Pages[self.ActiveTabIndex]; local newPage = self.Pages[pageIndex]
	self.ActiveTabIndex = pageIndex
	local oldCanvas = oldPage:FindFirstChildOfClass("CanvasGroup"); if oldCanvas then Animate(oldCanvas, {GroupTransparency = 1}, 0.15) end
	task.wait(0.15)
	oldPage.Visible = false; newPage.Visible = true
	local newCanvas = newPage:FindFirstChildOfClass("CanvasGroup"); if newCanvas then newCanvas.GroupTransparency = 1; Animate(newCanvas, {GroupTransparency = 0}, 0.15) end
	for i, button in ipairs(self.Tabs) do
		local isSelected = (i == pageIndex); local goalColor = isSelected and Theme.TextEmphasizedColor or Theme.TextColor; local goalBgColor = isSelected and Theme.AccentColor1 or Theme.BackgroundColor
		Animate(button, {TextColor3 = goalColor, BackgroundColor3 = goalBgColor})
	end
end

function ModernUI:AddTab(tabName)
	local Theme = self.Theme
	local tabIndex = #self.Tabs + 1
	
	-- ATUALIZAÇÃO: A página agora é um ScrollingFrame para permitir a rolagem do conteúdo.
	local page = Create("ScrollingFrame", {
		Name = tabName .. "Page", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, ClipsDescendants = true,
		Visible = (tabIndex == 1), Parent = self.PageContainer, BorderSizePixel = 0, ScrollingDirection = Enum.ScrollingDirection.Y,
		ScrollBarImageColor3 = Theme.PrimaryColor, ScrollBarThickness = 4, CanvasSize = UDim2.new(0,0,0,0)
	})

	-- ATUALIZAÇÃO: O Canvas agora tem tamanho automático para empurrar o CanvasSize do ScrollingFrame.
	local canvas = Create("CanvasGroup", {
		Name = "PageCanvas", Size = UDim2.new(1,0,0,0), AutomaticSize = Enum.AutomaticSize.Y,
		BackgroundColor3 = Theme.AccentColor1, BackgroundTransparency = 0.5, Parent = page,
		GroupTransparency = (tabIndex == 1) and 0 or 1,
	})

	Create("UICorner", {CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = canvas})
	Create("UIListLayout", { Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder, HorizontalAlignment = Enum.HorizontalAlignment.Center, Parent = canvas })
	Create("UIPadding", { PaddingTop = UDim.new(0, 15), PaddingBottom = UDim.new(0, 15), PaddingLeft = UDim.new(0, 15), PaddingRight = UDim.new(0, 15), Parent = canvas })
	table.insert(self.Pages, page)
	
	local tabButton = Create("TextButton", { Name = tabName, Text = tabName, Size = UDim2.new(1, -10, 0, 32), Font = Theme.FontBody, TextSize = 15, Parent = self.TabButtonContainer, AutoButtonColor = false })
	Create("UICorner", {CornerRadius = UDim.new(0, 4), Parent = tabButton})
	table.insert(self.Tabs, tabButton)
	
	tabButton.MouseButton1Click:Connect(function() self:SwitchToTab(tabIndex) end)
	
	if tabIndex == 1 then self:SwitchToTab(1) end
	
	local tabObject = setmetatable({}, Tab)
	tabObject.Window = self
	tabObject.PageContents = canvas
	tabObject.Theme = Theme
	return tabObject
end

--================================================================
-- MÉTODOS DOS COMPONENTES
--================================================================
function Tab:AddLabel(options) local Theme=self.Theme; options=options or {}; options.Parent=self.PageContents; local l=Create("TextLabel",{Name="Label",Text=options.Title or "Label",Font=options.Font or Theme.FontBody,TextSize=options.TextSize or 16,TextColor3=options.Color or Theme.TextColor,TextXAlignment=Enum.TextXAlignment.Left,Size=UDim2.new(1,0,0,options.TextSize or 16),BackgroundTransparency=1,Parent=options.Parent,LayoutOrder=options.Order or 0}); if options.Animate then Animate(l,{Position=l.Position,TextTransparency=0},0.5) end; return l end
function Tab:AddButton(options) local Theme=self.Theme; options=options or {}; options.Parent=self.PageContents; local b=Create("TextButton",{Name="Button",Text=options.Title or "Button",Font=Theme.FontBody,TextSize=16,TextColor3=Theme.TextEmphasizedColor,BackgroundColor3=Theme.AccentColor1,Size=UDim2.new(1,0,0,38),Parent=options.Parent,LayoutOrder=options.Order or 0,AutoButtonColor=false}); Create("UICorner",{CornerRadius=UDim.new(0,Theme.CornerRadius-2),Parent=b}); b.MouseEnter:Connect(function() Animate(b,{BackgroundColor3=Theme.PrimaryColor,TextColor3=Color3.new(1,1,1)}) end); b.MouseLeave:Connect(function() Animate(b,{BackgroundColor3=Theme.AccentColor1,TextColor3=Theme.TextEmphasizedColor}) end); b.MouseButton1Click:Connect(function() if options.Callback and type(options.Callback)=="function" then task.spawn(options.Callback) end; local s=Animate(b,{Size=UDim2.new(1,0,0,36)},0.1); s.Completed:Connect(function() Animate(b,{Size=UDim2.new(1,0,0,38)},0.1) end) end); return b end
function Tab:AddSlider(options) local Theme=self.Theme; options=options or {}; options.Parent=self.PageContents; local min,max,def=options.Min or 0,options.Max or 100,options.Default or 50; local h=Create("Frame",{Name="SliderHolder",Size=UDim2.new(1,0,0,50),BackgroundTransparency=1,Parent=options.Parent,LayoutOrder=options.Order or 0}); local tL=Create("TextLabel",{Name="TitleLabel",Text=options.Title or "Slider",Font=Theme.FontBody,TextSize=16,TextColor3=Theme.TextColor,TextXAlignment=Enum.TextXAlignment.Left,Size=UDim2.new(0.7,0,0,16),Position=UDim2.fromOffset(0,0),BackgroundTransparency=1,Parent=h}); local vL=Create("TextLabel",{Name="ValueLabel",Text=tostring(math.floor(def)),Font=Theme.FontBody,TextSize=16,TextColor3=Theme.TextColor,TextXAlignment=Enum.TextXAlignment.Right,Size=UDim2.new(0.3,0,0,16),Position=UDim2.new(0.7,0,0,0),BackgroundTransparency=1,Parent=h}); local tr=Create("Frame",{Name="Track",Size=UDim2.new(1,0,0,6),Position=UDim2.new(0,0,0,30),BackgroundColor3=Theme.AccentColor1,Parent=h}); Create("UICorner",{Parent=tr}); local p=Create("Frame",{Name="Progress",Size=UDim2.new((def-min)/(max-min),0,1,0),BackgroundColor3=Theme.PrimaryColor,Parent=tr}); Create("UICorner",{Parent=p}); local th=Create("TextButton",{Name="Thumb",Size=UDim2.fromOffset(18,18),Position=UDim2.new(p.Size.X.Scale,-9,0.5,-9),BackgroundColor3=Theme.TextEmphasizedColor,Parent=tr,ZIndex=6,Text=""}); Create("UICorner",{CornerRadius=UDim.new(1,0),Parent=th}); local function uS(iX) local rX=iX-tr.AbsolutePosition.X;local per=math.clamp(rX/tr.AbsoluteSize.X,0,1);local val=min+(max-min)*per;p.Size=UDim2.new(per,0,1,0);th.Position=UDim2.new(per,-9,0.5,-9);vL.Text=tostring(math.floor(val));if options.Callback then options.Callback(val)end end; th.InputBegan:Connect(function(i) if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then local c1=UserInputService.InputChanged:Connect(function(m)if m.UserInputType==Enum.UserInputType.MouseMovement or m.UserInputType==Enum.UserInputType.Touch then uS(m.Position.X)end end);local c2=UserInputService.InputEnded:Connect(function(e)if e==i then c1:Disconnect();c2:Disconnect()end end)end end); return h end
function Tab:AddDropdown(options) local Theme=self.Theme; options=options or {}; options.Parent=self.PageContents; local vals=options.Values or {"Opção 1","Opção 2"}; local def=options.Default or vals[1]; local isOpen=false; local h=Create("Frame",{Name="DropdownHolder",Size=UDim2.new(1,0,0,38),BackgroundTransparency=1,Parent=options.Parent,LayoutOrder=options.Order or 0,ZIndex=10}); local mB=Create("TextButton",{Name="MainButton",Text="  "..tostring(def),Font=Theme.FontBody,TextSize=16,TextColor3=Theme.TextEmphasizedColor,BackgroundColor3=Theme.AccentColor1,Size=UDim2.new(1,0,1,0),Parent=h,TextXAlignment=Enum.TextXAlignment.Left,AutoButtonColor=false}); Create("UICorner",{CornerRadius=UDim.new(0,Theme.CornerRadius-2),Parent=mB}); local a=Create("ImageLabel",{Image="rbxassetid://3926305904",ImageColor3=Theme.TextColor,Size=UDim2.fromOffset(20,20),AnchorPoint=Vector2.new(1,0.5),Position=UDim2.new(1,-10,0.5,0),BackgroundTransparency=1,Parent=mB}); local dL=Create("Frame",{Name="DropdownList",Size=UDim2.new(1,0,0,0),Position=UDim2.new(0,0,1,5),BackgroundColor3=Theme.AccentColor1,BorderSizePixel=0,ClipsDescendants=true,Visible=false,Parent=h,ZIndex=9}); Create("UICorner",{CornerRadius=UDim.new(0,Theme.CornerRadius-2),Parent=dL}); Create("UIListLayout",{SortOrder=Enum.SortOrder.LayoutOrder,Padding=UDim.new(0,2)},dL); local function tD() isOpen=not isOpen;dL.Visible=true;local lH=(#vals*32)+((#vals-1)*2);Animate(a,{Rotation=isOpen and 180 or 0});Animate(dL,{Size=UDim2.new(1,0,0,isOpen and lH or 0)},0.3);if not isOpen then task.wait(0.3);dL.Visible=false end end; for i,v in ipairs(vals) do local iB=Create("TextButton",{Name=v,Text="  "..tostring(v),LayoutOrder=i,Font=Theme.FontBody,TextSize=15,TextColor3=Theme.TextEmphasizedColor,BackgroundColor3=Theme.AccentColor1,Size=UDim2.new(1,0,0,32),Parent=dL,TextXAlignment=Enum.TextXAlignment.Left,AutoButtonColor=false});iB.MouseEnter:Connect(function() Animate(iB,{BackgroundColor3=Theme.PrimaryColor,TextColor3=Color3.new(1,1,1)}) end);iB.MouseLeave:Connect(function() Animate(iB,{BackgroundColor3=Theme.AccentColor1,TextColor3=Theme.TextEmphasizedColor}) end);iB.MouseButton1Click:Connect(function() mB.Text="  "..tostring(v);if options.Callback then task.spawn(options.Callback,v)end;tD()end)end;mB.MouseButton1Click:Connect(tD);return h end

return ModernUI
