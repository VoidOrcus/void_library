--[[ 
 	ModernUI Library 
 	Autor: VoidOrcus (com assistência da IA Gemini) 
 	Descrição: Uma biblioteca de UI moderna para Roblox, inspirada em sistemas operacionais. 
 	Versão: 7.0 - Adicionado Toggle, Checkbox, Sistema de Configuração (Salvar/Carregar) e aba "Settings" padrão.
]]

local ModernUI = {}
ModernUI.__index = ModernUI

local Tab = {}
Tab.__index = Tab

--================================================================
-- SERVIÇOS E CONSTANTES
--================================================================
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

--================================================================
-- [[ NOVO ]] - Módulo JSON para salvar e carregar configurações
--================================================================
local JSON = {}
do
	local T_STRING_REPLACE = {["\\"] = "\\\\",["\""] = "\\\"",["\b"] = "\\b",["\f"] = "\\f",["\n"] = "\\n",["\r"] = "\\r",["\t"] = "\\t"}
	local function escape(s) return '"'..s:gsub("[\"\\\b\f\n\r\t]", T_STRING_REPLACE)..'"' end
	function JSON.Encode(tbl)
		local result = {}
		if type(tbl) ~= "table" then return tostring(tbl) end
		if tbl[1] then -- Array
			for i=1, #tbl do table.insert(result, JSON.Encode(tbl[i])) end
			return "["..table.concat(result, ",").."]"
		else -- Dictionary
			for k,v in pairs(tbl) do table.insert(result, escape(tostring(k))..":"..JSON.Encode(v)) end
			return "{"..table.concat(result, ",").."}"
		end
	end
	function JSON.Decode(str)
		local success, result = pcall(function() return game:GetService("HttpService"):JSONDecode(str) end)
		if success then return result else return nil end
	end
end
--================================================================
-- CONFIGURAÇÃO DE TEMA ("Solarized Dark")
--================================================================
local Theme = {
	BackgroundColor = Color3.fromRGB(0, 43, 54),
	AccentColor1 = Color3.fromRGB(25, 25, 25), 
	TextColor = Color3.fromRGB(131, 148, 150),
	TextEmphasizedColor = Color3.fromRGB(200, 210, 215),
	PrimaryColor = Color3.fromRGB(38, 139, 210),
	CloseColor = Color3.fromRGB(220, 50, 47),
	FontTitle = Enum.Font.Code,
	FontBody = Enum.Font.Code,
	CornerRadius = 4,
	AnimationSpeed = 0.2,
}
ModernUI.Theme = Theme 

--================================================================
-- FUNÇÕES AUXILIARES
--================================================================
local function Create(instanceType, properties)
	local inst = Instance.new(instanceType)
	for prop, value in pairs(properties or {}) do
		inst[prop] = value
	end
	return inst
end

local function Animate(instance, goal, speed)
	speed = speed or Theme.AnimationSpeed
	local tweenInfo = TweenInfo.new(speed, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
	local tween = TweenService:Create(instance, tweenInfo, goal)
	tween:Play()
	return tween
end

--================================================================
-- CRIAÇÃO DA JANELA PRINCIPAL
--================================================================
function ModernUI.CreateWindow(options)
	local self = setmetatable({}, ModernUI)
	options = options or {}
	local title = options.Title or "ModernUI"
	local size = options.Size or UDim2.fromOffset(600, 450)
	local position = options.Position or UDim2.fromScale(0.5, 0.5)

	self.Tabs = {}
	self.Pages = {}
	self.ActiveTabIndex = 1
	self.SidebarSections = {}
	self.TrackedElements = {} -- [[ NOVO ]] Tabela para registrar todos os elementos configuráveis

	self.ScreenGui = Create("ScreenGui", { Name = "ModernUI_ScreenGui_"..math.random(1,10000), Parent = CoreGui, ZIndexBehavior = Enum.ZIndexBehavior.Global, ResetOnSpawn = false })
	if syn and syn.protect_gui then pcall(syn.protect_gui, self.ScreenGui) end

	self.WindowFrame = Create("Frame", {
		Name = "WindowFrame", Size = size, Position = position, AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Theme.BackgroundColor, 
		BackgroundTransparency = 0.6,
		BorderSizePixel = 0, Parent = self.ScreenGui, ClipsDescendants = true
	})
	
	local BackgroundImage = Create("ImageLabel", {
		Name = "BackgroundImage", Size = UDim2.new(1, 0, 1, 0),
		Image = "rbxassetid://105128443123746",
		ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(10, 10, 110, 110),
		ImageTransparency = 0.2, BackgroundTransparency = 1,
		ZIndex = 0, Parent = self.WindowFrame
	})

	Create("UICorner", { CornerRadius = UDim.new(0, Theme.CornerRadius), Parent = self.WindowFrame })
	Create("UIStroke", { Thickness = 1, Color = Theme.AccentColor1, Transparency = 0.5, Parent = self.WindowFrame })
	
	local TitleBar = Create("Frame", { Name = "TitleBar", Size = UDim2.new(1, 0, 0, 32), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, Parent = self.WindowFrame, ZIndex = 4 })
	local TitleLabel = Create("TextLabel", { Name = "TitleLabel", Size = UDim2.new(1, -120, 1, 0), Position = UDim2.fromOffset(10, 0), BackgroundTransparency = 1, Font = Theme.FontTitle, TextColor3 = Theme.TextEmphasizedColor, Text = "  > " .. title, TextXAlignment = Enum.TextXAlignment.Left, TextSize = 15, Parent = TitleBar, ZIndex = 5 })
	
	local Sidebar = Create("Frame", { Name = "Sidebar", Size = UDim2.new(0, 140, 1, -32), Position = UDim2.fromOffset(0, 32), BackgroundColor3 = Theme.BackgroundColor, BackgroundTransparency = 0.3, BorderSizePixel = 0, Parent = self.WindowFrame })
	
	local SidebarContent = Create("Frame", { Name = "SidebarContent", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Parent = Sidebar })
	Create("UIPadding", { PaddingTop = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10), PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), Parent = SidebarContent })
	Create("UIListLayout", { FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder, HorizontalAlignment = Enum.HorizontalAlignment.Center, Padding = UDim.new(0, 10), Parent = SidebarContent })

	self.SidebarSections.Top = Create("Frame", { Name = "TopSection", Size = UDim2.new(1, 0, 0.3, 0), LayoutOrder = 1, BackgroundTransparency = 1, Parent = SidebarContent })
	Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = self.SidebarSections.Top })

	Create("Frame", { Name = "Separator1", Size = UDim2.new(1, 0, 0, 1), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, LayoutOrder = 2, Parent = SidebarContent })

	self.SidebarSections.Middle = Create("ScrollingFrame", { Name = "MiddleSection", Size = UDim2.new(1, 0, 0.4, 0), LayoutOrder = 3, BackgroundTransparency = 1, BorderSizePixel = 0, ScrollingDirection = Enum.ScrollingDirection.Y, ScrollBarImageColor3 = Theme.TextColor, ScrollBarThickness = 4, AutomaticCanvasSize = Enum.AutomaticSize.Y, Parent = SidebarContent })
	Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = self.SidebarSections.Middle })

	Create("Frame", { Name = "Separator2", Size = UDim2.new(1, 0, 0, 1), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, LayoutOrder = 4, Parent = SidebarContent })

	self.SidebarSections.Bottom = Create("Frame", { Name = "BottomSection", Size = UDim2.new(1, 0, 0.3, 0), LayoutOrder = 5, BackgroundTransparency = 1, Parent = SidebarContent })
	Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = self.SidebarSections.Bottom })

	local ContentSeparator = Create("Frame", { Name = "Separator", Size = UDim2.new(0, 1, 1, -32), Position = UDim2.fromOffset(140, 32), BackgroundColor3 = Theme.AccentColor1, BorderSizePixel = 0, Parent = self.WindowFrame })

	self.PageContainer = Create("Frame", { Name = "PageContainer", Size = UDim2.new(1, -141, 1, -32), Position = UDim2.fromOffset(141, 32), BackgroundTransparency = 1, ClipsDescendants = true, Parent = self.WindowFrame })

	local WindowButtonsFrame = Create("Frame", { Name = "WindowButtons", Size = UDim2.fromOffset(120, 32), Position = UDim2.new(1, -120, 0, 0), BackgroundTransparency = 1, Parent = TitleBar, ZIndex = 10 })
	Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = WindowButtonsFrame })
	
	local MinimizeButton = Create("TextButton", { Name = "Minimize", LayoutOrder = 1, Size = UDim2.fromOffset(28, 28), BackgroundTransparency = 1, Text = "–", Font = Enum.Font.SourceSansBold, TextSize = 18, TextColor3 = Theme.TextColor, Parent = WindowButtonsFrame, ZIndex = 11, AutoButtonColor = false })
	local MaximizeButton = Create("TextButton", { Name = "Maximize", LayoutOrder = 2, Size = UDim2.fromOffset(28, 28), BackgroundTransparency = 1, Text = "□", Font = Enum.Font.SourceSansBold, TextSize = 16, TextColor3 = Theme.TextColor, Parent = WindowButtonsFrame, ZIndex = 11, AutoButtonColor = false })
	local CloseButton = Create("TextButton", { Name = "Close", LayoutOrder = 3, Size = UDim2.fromOffset(28, 28), BackgroundTransparency = 1, Text = "✕", Font = Enum.Font.SourceSansBold, TextSize = 14, TextColor3 = Theme.TextColor, Parent = WindowButtonsFrame, ZIndex = 11, AutoButtonColor = false })
	
	-- Lógica dos botões da janela... (minimizada, etc - sem alterações aqui)
	-- ...

	-- [[ NOVO ]] - Criação automática da aba de Configurações
	task.defer(function()
		local settingsTab = self:AddTab({Name = "Settings", Section = "Bottom"})
		
		local filenameInput = settingsTab:AddTextInput({
			Title = "Nome do Arquivo",
			Default = "config.txt",
			Key = "ConfigFile" -- Chave especial para não ser salva dentro do arquivo
		})

		settingsTab:AddButton({Title = "Salvar Configuração", Callback = function()
			local config = {}
			for key, element in pairs(self.TrackedElements) do
				if element.GetValue then -- Certifica-se que o elemento tem uma função para obter o valor
					config[key] = element.GetValue()
				end
			end
			local filename = filenameInput.CurrentValue
			if writefile then
				writefile(filename, JSON.Encode(config))
			else
				warn("ModernUI: A função 'writefile' não está disponível neste ambiente.")
			end
		end})

		settingsTab:AddButton({Title = "Carregar Configuração", Callback = function()
			local filename = filenameInput.CurrentValue
			if readfile and isfile and isfile(filename) then
				local fileContent = readfile(filename)
				local config = JSON.Decode(fileContent)
				if type(config) == "table" then
					for key, value in pairs(config) do
						local element = self.TrackedElements[key]
						if element and element.SetValue then
							element.SetValue(value)
						end
					end
				else
					warn("ModernUI: Erro ao decodificar o arquivo de configuração ou o arquivo está vazio.")
				end
			else
				warn("ModernUI: A função 'readfile' não está disponível ou o arquivo não existe.")
			end
		end})
	end)

	return self
end

--================================================================
-- SISTEMA DE ABAS (sem alterações)
--================================================================
-- ... (código existente)

--================================================================
-- MÉTODOS DOS COMPONENTES (MODIFICADOS E NOVOS)
--================================================================

-- [[ MODIFICADO ]] - Adicionada a lógica de registro para o sistema de config
function Tab:AddSlider(options) 
	options = options or {}
	local key = options.Key
	if not key then warn("ModernUI: AddSlider requer uma 'Key' para o sistema de configurações.") end

	options.Parent = self.PageContents
	local min, max, default = options.Min or 0, options.Max or 100, options.Default or 50
	
	local holder = Create("Frame", { Name = "SliderHolder", Size = UDim2.new(1, 0, 0, 50), BackgroundTransparency = 1, Parent = options.Parent, LayoutOrder = options.Order or 0 })
	local titleLabel = Create("TextLabel", { Name = "TitleLabel", Text = options.Title or "Slider", Font = Theme.FontBody, TextSize = 16, TextColor3 = Theme.TextColor, TextXAlignment = Enum.TextXAlignment.Left, Size = UDim2.new(0.7, 0, 0, 16), Position = UDim2.fromOffset(0, 0), BackgroundTransparency = 1, Parent = holder })
	local valueLabel = Create("TextLabel", { Name = "ValueLabel", Text = tostring(math.floor(default)), Font = Theme.FontBody, TextSize = 16, TextColor3 = Theme.TextColor, TextXAlignment = Enum.TextXAlignment.Right, Size = UDim2.new(0.3, 0, 0, 16), Position = UDim2.new(0.7, 0, 0, 0), BackgroundTransparency = 1, Parent = holder })
	local track = Create("Frame", { Name = "Track", Size = UDim2.new(1, 0, 0, 6), Position = UDim2.new(0, 0, 0, 30), BackgroundColor3 = Theme.AccentColor1, Parent = holder })
	Create("UICorner", {Parent = track})
	local progress = Create("Frame", { Name = "Progress", Size = UDim2.new((default-min)/(max-min), 0, 1, 0), BackgroundColor3 = Theme.PrimaryColor, Parent = track })
	Create("UICorner", {Parent = progress})
	local thumb = Create("TextButton", { Name = "Thumb", Size = UDim2.fromOffset(18, 18), Position = UDim2.new(progress.Size.X.Scale, -9, 0.5, -9), BackgroundColor3 = Theme.TextEmphasizedColor, Parent = track, ZIndex = 6, Text = "" })
	Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = thumb})

	local function UpdateSliderFromValue(value)
		local clampedValue = math.clamp(value, min, max)
		local percentage = (clampedValue - min) / (max - min)
		progress.Size = UDim2.new(percentage, 0, 1, 0)
		thumb.Position = UDim2.new(percentage, -9, 0.5, -9)
		valueLabel.Text = tostring(math.floor(clampedValue))
		if options.Callback then task.spawn(options.Callback, clampedValue) end
	end

	local function UpdateSliderFromInput(inputX) 
		local relativeX = inputX - track.AbsolutePosition.X
		local percentage = math.clamp(relativeX / track.AbsoluteSize.X, 0, 1)
		local value = min + (max-min) * percentage
		UpdateSliderFromValue(value)
	end
	
	thumb.InputBegan:Connect(function(input) 
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then 
			local connMove, connEnd
			connMove = UserInputService.InputChanged:Connect(function(m) if m.UserInputType == Enum.UserInputType.MouseMovement or m.UserInputType == Enum.UserInputType.Touch then UpdateSliderFromInput(m.Position.X) end end)
			connEnd = UserInputService.InputEnded:Connect(function(e) if e == input then connMove:Disconnect(); connEnd:Disconnect() end end)
		end 
	end)

	if key then
		self.Window.TrackedElements[key] = {
			GetValue = function() return tonumber(valueLabel.Text) end,
			SetValue = UpdateSliderFromValue
		}
	end
	
	return holder 
end

-- [[ NOVO ]] - Componente Checkbox
function Tab:AddCheckbox(options)
	options = options or {}
	local key = options.Key
	if not key then warn("ModernUI: AddCheckbox requer uma 'Key' para o sistema de configurações.") end

	options.Parent = self.PageContents
	local isChecked = options.Default or false

	local holder = Create("Frame", {Name = "CheckboxHolder", Size = UDim2.new(1, 0, 0, 28), BackgroundTransparency = 1, Parent = options.Parent, LayoutOrder = options.Order or 0})
	local button = Create("TextButton", {Name = "CheckboxButton", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Text = "", Parent = holder})
	
	local titleLabel = Create("TextLabel", {Name = "Title", Text = options.Title or "Checkbox", Font = Theme.FontBody, TextColor3 = Theme.TextColor, TextSize = 16, TextXAlignment = Enum.TextXAlignment.Left, Size = UDim2.new(1, -35, 1, 0), Position = UDim2.new(0, 35, 0, 0), BackgroundTransparency = 1, Parent = button})
	local box = Create("Frame", {Name = "Box", Size = UDim2.fromOffset(20, 20), Position = UDim2.new(0, 0, 0.5, 0), AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = Theme.AccentColor1, Parent = button})
	Create("UICorner", {Parent = box})

	local check = Create("ImageLabel", {Name = "Check", Size = UDim2.fromScale(0.8, 0.8), Position = UDim2.fromScale(0.5, 0.5), AnchorPoint = Vector2.new(0.5, 0.5), Image = "rbxassetid://3926306380", ImageColor3 = Theme.TextEmphasizedColor, BackgroundTransparency = 1, ImageTransparency = 1, Parent = box})

	local function SetValue(value)
		isChecked = value
		Animate(check, {ImageTransparency = isChecked and 0 or 1}, 0.15)
		Animate(box, {BackgroundColor3 = isChecked and Theme.PrimaryColor or Theme.AccentColor1})
		if options.Callback then task.spawn(options.Callback, isChecked) end
	end

	button.MouseButton1Click:Connect(function() SetValue(not isChecked) end)
	SetValue(isChecked) -- Set initial state

	if key then
		self.Window.TrackedElements[key] = { GetValue = function() return isChecked end, SetValue = SetValue }
	end

	return holder
end

-- [[ NOVO ]] - Componente Toggle
function Tab:AddToggle(options)
	options = options or {}
	local key = options.Key
	if not key then warn("ModernUI: AddToggle requer uma 'Key' para o sistema de configurações.") end
	
	options.Parent = self.PageContents
	local isToggled = options.Default or false

	local holder = Create("Frame", {Name = "ToggleHolder", Size = UDim2.new(1, 0, 0, 28), BackgroundTransparency = 1, Parent = options.Parent, LayoutOrder = options.Order or 0})
	local button = Create("TextButton", {Name = "ToggleButton", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Text = "", Parent = holder})

	local titleLabel = Create("TextLabel", {Name = "Title", Text = options.Title or "Toggle", Font = Theme.FontBody, TextColor3 = Theme.TextColor, TextSize = 16, TextXAlignment = Enum.TextXAlignment.Left, Size = UDim2.new(1, -55, 1, 0), Position = UDim2.new(0, 0, 0, 0), BackgroundTransparency = 1, Parent = button})
	local track = Create("Frame", {Name = "Track", Size = UDim2.new(0, 40, 0, 20), Position = UDim2.new(1, 0, 0.5, 0), AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Theme.AccentColor1, Parent = button})
	Create("UICorner", {CornerRadius = UDim.new(1,0), Parent = track})

	local thumb = Create("Frame", {Name = "Thumb", Size = UDim2.fromOffset(16, 16), Position = UDim2.new(0, 2, 0.5, 0), AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = Theme.TextEmphasizedColor, Parent = track})
	Create("UICorner", {CornerRadius = UDim.new(1,0), Parent = thumb})

	local function SetValue(value)
		isToggled = value
		local thumbPos = isToggled and UDim2.new(1, -2, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
		local thumbAnchor = isToggled and Vector2.new(1, 0.5) or Vector2.new(0, 0.5)
		local trackColor = isToggled and Theme.PrimaryColor or Theme.AccentColor1
		
		Animate(thumb, {Position = thumbPos, AnchorPoint = thumbAnchor})
		Animate(track, {BackgroundColor3 = trackColor})
		
		if options.Callback then task.spawn(options.Callback, isToggled) end
	end

	button.MouseButton1Click:Connect(function() SetValue(not isToggled) end)
	SetValue(isToggled)

	if key then
		self.Window.TrackedElements[key] = { GetValue = function() return isToggled end, SetValue = SetValue }
	end

	return holder
end

-- [[ NOVO ]] - Componente TextInput
function Tab:AddTextInput(options)
	options = options or {}
	options.Parent = self.PageContents
	
	local holder = Create("Frame", { Name = "TextInputHolder", Size = UDim2.new(1, 0, 0, 60), BackgroundTransparency = 1, Parent = options.Parent, LayoutOrder = options.Order or 0 })
	local titleLabel = Create("TextLabel", {Name = "Title", Text = options.Title or "Input", Font = Theme.FontBody, TextColor3 = Theme.TextColor, TextSize = 16, TextXAlignment = Enum.TextXAlignment.Left, Size = UDim2.new(1, 0, 0, 20), BackgroundTransparency = 1, Parent = holder})

	local textbox = Create("TextBox", {
		Name = "Input", Text = options.Default or "", Font = Theme.FontBody, TextSize = 15, TextColor3 = Theme.TextEmphasizedColor,
		BackgroundColor3 = Theme.AccentColor1, Size = UDim2.new(1, 0, 0, 35), Position = UDim2.new(0,0,0,25),
		ClearTextOnFocus = false, Parent = holder, TextXAlignment = Enum.TextXAlignment.Left,
	})
	Create("UICorner", {CornerRadius = UDim.new(0, Theme.CornerRadius-2), Parent = textbox})
	Create("UIPadding", {PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), Parent = textbox})

	local element = {
		CurrentValue = options.Default or "",
		SetValue = function(text) textbox.Text = text; element.CurrentValue = text end,
		GetValue = function() return element.CurrentValue end
	}
	textbox.FocusLost:Connect(function(enterPressed)
		element.CurrentValue = textbox.Text
		if options.Callback then task.spawn(options.Callback, textbox.Text) end
	end)

	if options.Key then -- Permite que o próprio TextInput seja salvo, se necessário.
		self.Window.TrackedElements[options.Key] = element
	end

	return element
end

return ModernUI
